#!/usr/bin/python3

import sys
import os
import shutil
from glob import glob
from urllib import request

httpser_home = os.path.join(os.environ['HOME'],".httpser")
servers = os.path.join(httpser_home,"servers")
actives = os.path.join(httpser_home,"actives")
templates = os.path.join(httpser_home,"templates")
https_template_file = os.path.join(templates, "https.conf")
http_template_file = os.path.join(templates, "http.conf")

def init():
    if not os.path.exists(httpser_home):
        os.mkdir(httpser_home)

    if not os.path.exists(servers):
        os.mkdir(servers)

    if not os.path.exists(actives):
        os.mkdir(actives)

    if not os.path.exists(templates):
        os.mkdir(templates)

    if not os.path.exists(https_template_file):
        with request.urlopen("https://raw.githubusercontent.com/Andful/httpser/unified/httpser/res/https.conf") as r:
            with open(https_template_file, "w") as config:
                config.write(r.read().decode("utf-8"))
    if not os.path.exists(http_template_file):
        with request.urlopen("https://raw.githubusercontent.com/Andful/httpser/unified/httpser/res/http.conf") as r:
            with open(http_template_file, "w") as config:
                config.write(r.read().decode("utf-8"))
def add():
    if len(sys.argv) < 3:
        print("USAGE: %s %s DOMAIN [FILE1, FILE2, FILE3...]" % (sys.argv[0], sys.argv[1]))
        return

    domain = sys.argv[2]
    domain_dir = os.path.join(servers, domain)
    if os.path.exists(domain_dir):
        shutil.rmtree(domain_dir)

    os.mkdir(domain_dir)

    with open(http_template_file) as http_template:
        http_template_string = http_template.read()

    http_template_string = http_template_string.replace("{{.Domain}}",domain)
    http_template_string = http_template_string.replace("{{.ServersDir}}","/httpser/servers")

    with open(os.path.join(domain_dir,"http."+domain+".conf"), "w") as http_domain_conf:
        http_domain_conf.write(http_template_string)


    with open(https_template_file) as https_template:
        https_template_string = https_template.read()

    https_template_string = https_template_string.replace("{{.Domain}}",domain)
    https_template_string = https_template_string.replace("{{.ServersDir}}","/httpser/servers")

    with open(os.path.join(domain_dir,"https."+domain+".conf"), "w") as https_domain_conf:
        https_domain_conf.write(https_template_string)

    include_dir = os.path.join(domain_dir,"include")

    os.mkdir(include_dir)

    for e in sys.argv[3:]:
        shutil.copy(e,include_dir)

def remove():
    if len(sys.argv) < 3:
        print("USAGE: %s %s [DOMAIN]" % (sys.argv[0], sys.argv[1]))
        return

    domain = sys.argv[2]
    domain_dir = os.path.join(servers, domain)

    shutil.rmtree(domain_dir)
    pass

def list():
    domains = [os.path.basename(e) for e in glob(os.path.join(servers,"*"))]
    print(" ".join(domains))

def clear():
    response = input("Are you sure you want to clear the domains? (y/N):")
    if response.lower() == 'y' or response.lower() == 'yes':
        print("removing domains...")
        for domain_dir in glob(os.path.join(servers,"*")):
            print("removing %s" % os.path.basename(domain_dir))
            shutil.rmtree(domains_dir)
    else:
        print("operation aborted")

def install():
    pass

def uninstall():
    response = input("Are you sure you want to uninstall %s? (y/N)" % sys.argv[0])
    if response.lower() == 'y' or response.lower() == 'yes':
        shutil.rmtree(httpser_home)
        os.remove(os.path.abspath(__file__))
        print("uninstall successfull")
    else:
        print("operation aborted")

def help():
    print("Help TODO")

if __name__=='__main__':
    init()
    if len(sys.argv) > 1:
        if sys.argv[1] == "add":
            add()
        elif sys.argv[1] == "remove" or sys.argv[1] == "rm":
            remove()
        elif sys.argv[1] == "list":
            list()
        elif sys.argv[1] == "clear":
            clear()
        elif sys.argv[1] == "install":
            install()
        elif sys.argv[1] == "uninstall":
            uninstall()
        elif sys.argv[1] == "help" or sys.argv[1] == "-h" or sys.argv[1] == "--help":
            help()
        else:
            help()
    else:
        help()
